#pragma GCC optimize("Ofast,unroll-loops,inline")
#pragma GCC option("arch=native","tune=native","no-zero-upper")
#pragma GCC target("bmi,bmi2,lzcnt,popcnt,movbe,aes,pclmul,rdrnd,abm,mmx,avx,avx2,f16c,fma,sse,sse2,sse3,ssse3,sse4.1,sse4.2")
#include <cstdio>
#include <cctype>

using namespace std;
typedef unsigned int uint;
typedef unsigned long long ull;

const ull mod = 1e9 + 7;
uint prime[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997};
uint a1[] = {1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,73741817,147483634,294967268,589934536,179869065,359738130,719476260,438952513,877905026,755810045,511620083,23240159,46480318,92960636,185921272,371842544,743685088,487370169,974740338,949480669,898961331,797922655,595845303,191690599,383381198,766762396,533524785,67049563,134099126,268198252,536396504,72793001,145586002,291172004};
uint a2[] = {1,582344008,279632277,814450963,792845266,694305326,488314807,883556063,418385479,24349907,337547102,891485106,66287806,357350306,999360799,53940009,812734592,432486924,966758230,484284834,271032089,900035335,656611420,344755299,193535125,592352867,304398956,827201306,586864408,114968481,550553413,900218958,409643880,261995441,121667210,217612490,730382624,656379405,800684970,311241123,753495177,311295630,578117039,227711375,856446529,844322732,356585896,419321562,346574717,356465780,586946277,36225701,765278875,185642052,858271671,344331841,966321654,68427885,530923104,158901630,444185163,304873342,669846602,223292752};
uint a3[] = {1,246797651,112754241,624295524,774491455,475573515,558220290,348166605,669157962,13520978,586264063,601295869,986414877,850939823,988686144,207409832,973586826,19393146,844796772,442525573,159329126,757428655,545568128,508352811,755825015,963288913,298581290,488725670,495086748,592325233,109136358,604552886,125655169,328128219,109144658,25041843,985848924,980941152,388176162,285188714,214223486,763742422,399221884,509305330,205912324,519420185,642643675,309786789,300850082,21013731,413242908,272897462,114008598,983243927,844979454,930689960,329439302,311545687,192560036,228611888,554128956,734578295,412539673,528011376};
uint d[100000], prime_grp[500000], cnt, curr;
char buf[700000], *p = buf;

__attribute__((optimize("-Ofast")))
inline void read() {
    while(!isdigit(*p)) ++p;
    curr = *p++ ^ 48;
    while(isdigit(*p)) curr = curr * 10 + (*p++ ^ 48);
}

__attribute__((optimize("-Ofast")))
inline uint find(uint a) {
    if(!d[a]) return a;
    return d[a] = find(d[a]);
}

__attribute__((optimize("-Ofast")))
inline void join(uint i, uint f) {
    f = (f - 1) >> 1;
    if(prime_grp[f]) {
        i = find(i), f = find(prime_grp[f]);
        if(i != f) d[i] = f, --cnt;
    } else {
        prime_grp[f] = i;
    }
}

__attribute__((optimize("-Ofast")))
inline ull mulmod(ull x, ull y) {
    ull ans = 0;
    __asm__("movq %1,%%rax\n mulq %2\n divq %3\n":"=d"(ans):"m"(x),"m"(y),"m"(mod):"%rax");
    return ans;
}

__attribute__((optimize("-Ofast")))
int main() {
    fread(buf, 1, 700000, stdin);
    read();
    uint n = cnt = curr, j, f;
    for(register uint i = 1; i <= n; ++i) {
        read();
        f = prime[j = 0];
        do {
            if(curr % f == 0) {
                join(i, f);
                do { curr /= f; } while(curr % f == 0);
            }
            if(++j == 168) break;
            f = prime[j];
        } while(f * f <= curr);
        if(curr != 1) join(i, curr);
    }
    uint ans = mulmod(mulmod(a1[cnt % 64], a2[(cnt >> 6) % 64]), a3[cnt >> 12]) - 2;
    puts(ans ? "YES" : "NO");
    printf("%d", ans);
    return 0;
}
